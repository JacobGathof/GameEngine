#version 430 core

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;


layout (std430, binding = 0) buffer PosBuf {
	vec4 position_buffer[];
};
layout (std430, binding = 1) buffer VelBuf {
	vec4 velocity_buffer[];
};

uniform float dt;
uniform vec2 center;

const vec3 palette[5] = vec3[](vec3(1,1,1), vec3(0,0,1), vec3(.75,.75,1), vec3(0,0,1), vec3(1,1,1));

vec3 colorAt(float f){
	return mix(palette[int(floor(f))], palette[int(ceil(f))], fract(f));
}

vec2 accel_field(float x, float y){
	return vec2(y*cos(y),x*cos(x));
}

void main(){
	
	uint index = int(gl_GlobalInvocationID.x);
	vec4 pos = position_buffer[index];
	vec4 vel = velocity_buffer[index];
	
	float x = pos.z;
	float y = pos.w;
	
	vec2 accel = accel_field(x,y);
	
	pos.zw += dt*accel;
	pos.xy += dt*pos.zw;
	vel.xyz = vec3(1,1,1);//colorAt(vel.w*4);
	
	vel.w -= dt;
	if(vel.w <= 0.0f){
		vel.w  = 1.0f;
		pos.xy = center + 1000*normalize(pos.xy);
	}
	
	
	
	position_buffer[index] = pos;
	velocity_buffer[index] = vel;
	
}