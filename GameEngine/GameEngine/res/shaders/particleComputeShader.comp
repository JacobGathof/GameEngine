#version 430 core

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;


layout (std430, binding = 0) buffer PosBuf {
	vec4 position_buffer[];
};
layout (std430, binding = 1) buffer VelBuf {
	vec4 velocity_buffer[];
};

uniform float dt;
uniform vec2 center;
uniform float tight;

const vec3 palette[5] = vec3[](vec3(1,1,1), vec3(0,0,1), vec3(.75,.75,1), vec3(0,0,1), vec3(1,1,1));

vec3 colorAt(float f){
	return mix(palette[int(floor(f))], palette[int(ceil(f))], fract(f));
}

vec2 field(float x, float y, float z, float w){
	float d = sqrt(x*x + y*y);
	return vec2(-y, x) + -1.0 * (d*d/(1000*1000) - 1) * vec2(x, y);
}

void main(){
	
	uint index = int(gl_GlobalInvocationID.x);
	vec4 pos = position_buffer[index];
	vec4 vel = velocity_buffer[index];
	
	
	vec2 v = field(pos.x, pos.y, pos.z, pos.w);
	
	pos.zw = v*(1-tight) + (dt*v + pos.zw)*(tight);
	pos.xy += dt*pos.zw;
	//vel.xyz = vec3(1,1,1);//colorAt(vel.w*4);
	
	vel.w -= dt;
	if(vel.w <= 0.0f){
		vel.w  = 4.0f;
		pos.xy = center + 2*vel.xy;
		pos.zw = vec2(0,0);
	}
	
	
	
	position_buffer[index] = pos;
	velocity_buffer[index] = vel;
	
}